{"version":3,"sources":["components/Settings/index.tsx","services/weather.ts","hooks/useWeather.ts","components/WeatherPreview/index.tsx","hooks/useSearch.ts","components/SearchBox/index.tsx","hooks/useSettings.ts","components/RefreshButton/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SettingsLabels","API_URL","getWeatherByCityName","city","a","request","get","params","q","appid","process","units","data","getCityList","query","getIconUrl","iconId","DEFAULT_PLACE","useWeather","useState","setData","loading","setLoading","error","setError","loadData","useEffect","refreshData","name","getWeather","setCurrentPlace","WeatherPreview","settings","main","wind","currentWeather","weather","Grid","container","spacing","direction","justifyContent","alignContent","item","alignItems","xs","Typography","variant","temp","Avatar","alt","src","icon","sx","width","height","temp_min","temp_max","feels_like","description","pressure","humidity","windSpeed","speed","Settings","toggleField","options","setOptions","settingKeys","Object","keys","handleChange","event","target","Box","display","FormControl","m","component","FormLabel","FormGroup","map","option","FormControlLabel","control","Checkbox","checked","onChange","label","useSearch","searchPlace","FlagIcon","styled","img","WeatherIcon","SearchBox","props","inputValue","setInputValue","updateSearch","useCallback","debounce","list","length","Autocomplete","id","onInputChange","newInputValue","renderInput","TextField","fullWidth","InputProps","endAdornment","Fragment","CircularProgress","color","size","getOptionLabel","place","onSelect","freeSolo","renderOption","country","sys","key","gutterBottom","toLocaleLowerCase","useSettings","setSettings","field","hasOwnProperty","StyledFab","Fab","RefreshButton","App","Container","CssBaseline","mt","onClick","LinearProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7cdd3c0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { ISettings, ISettingField } from \"../../hooks/useSettings\";\n\ninterface ISettingsProps {\n  settings: ISettings;\n  toggleField: (field: ISettingField) => void;\n}\n\nenum SettingsLabels {\n  pressure = \"Pressure\",\n  humidity = \"Humidity\",\n  windSpeed = \"Wind speed\",\n}\n\nconst Settings: React.FC<ISettingsProps> = ({ settings, toggleField }) => {\n  const [options, setOptions] = useState<ISettingField[]>([]);\n\n  useEffect(() => {\n    if (settings) {\n      const settingKeys = Object.keys(settings) as ISettingField[];\n\n      setOptions(settingKeys);\n    }\n  }, [settings]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    toggleField(event.target.name as ISettingField);\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\">\n        <FormLabel component=\"legend\">Settings</FormLabel>\n        <FormGroup>\n          {options.map((option: ISettingField) => (\n            <FormControlLabel\n              key={option}\n              control={\n                <Checkbox\n                  checked={settings[option]}\n                  onChange={handleChange}\n                  name={option}\n                />\n              }\n              label={SettingsLabels[option]}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default Settings;\n","import request from \"axios\";\n\nconst API_URL = \"https://api.openweathermap.org/data/2.5\";\n\n/**\n * Weather fields in API response\n * @link https://openweathermap.org/current#format\n */\nexport interface ICoordField {\n  coord: {\n    /** City geo location, longitude */\n    lon: number;\n    /** City geo location, latitude */\n    lat: number;\n  };\n}\n\nexport interface IWeatherField {\n  /** Weather condition id, */\n  id: number;\n  /** Group of weather parameters (Rain, Snow, Extreme etc.) */\n  main: string;\n  /** Weather condition within the group */\n  description: string;\n  /** Weather icon id */\n  icon: string;\n}\n\nexport interface IMainField {\n  /** Temperature, Kelvins */\n  temp: number;\n  /** Temperature, Kelvins. This temperature parameter accounts for the human perception of weather */\n  feels_like: number;\n  /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */\n  pressure: number;\n  /** Humidity, % */\n  humidity: number;\n  /** Minimum temperature within a large city or a megalopolis (optional parameter), Kelvin */\n  temp_min: number;\n  /** Maximum temperature within a large city or a megalopolis (optional parameter), Kelvins */\n  temp_max: number;\n  /**  Atmospheric pressure on the sea level, hPa */\n  sea_level: number;\n  /** Atmospheric pressure on the ground level, hPa */\n  grnd_level: number;\n}\n\nexport interface IWindField {\n  /** Wind speed. Unit: meter/sec. */\n  speed: number;\n  /** Wind direction, degrees (meteorological) */\n  deg: number;\n}\n\nexport interface ICloudsField {\n  /** Cloudiness, % */\n  all: number;\n}\n\nexport interface IRainField {\n  /** Rain volume for the last 1 hour */\n  \"1h\": number;\n  /** Rain volume for the last 3 hours */\n  \"3h\": number;\n}\n\nexport interface IShowField {\n  /** Snow volume for the last 1 hour */\n  \"1h\": number;\n  /** Snow volume for the last 3 hours */\n  \"3h\": number;\n}\n\nexport interface ISysField {\n  /** Internal parameter */\n  id: number;\n  /** Country code (GB, JP etc.) */\n  country: string;\n  /** Sunrise time, unix, UTC */\n  sunrise: number;\n  /** Sunset time, unix, UTC */\n  sunset: number;\n}\n\ntype Nullable<T> = { [P in keyof T]: T[P] | null };\n\nexport interface ICityWeather {\n  /** City ID */\n  id: number;\n  /** City name */\n  name: string;\n  /** Time of data calculation, unix, UTC */\n  dt: number;\n  /** Shift in seconds from UTC */\n  timezone: number;\n  main: IMainField;\n  wind: IWindField;\n  clouds: ICloudsField;\n  weather: IWeatherField[];\n  rain: Nullable<IRainField>;\n  snow: Nullable<IShowField>;\n  sys: ISysField;\n}\n\nexport interface IResponseCityList {\n  count: number;\n  list: ICityWeather[];\n}\n\n/**\n * Call current weather data for one location\n * @link https://openweathermap.org/current#name\n */\nexport const getWeatherByCityName = async (\n  city: string\n): Promise<ICityWeather> => {\n  const { data } = await request.get<ICityWeather>(`${API_URL}/weather`, {\n    params: {\n      q: city,\n      appid: process.env.REACT_APP_OPEN_WEATHER_KEY,\n      units: \"metric\", // For temperature in Celsius\n    },\n  });\n\n  return data;\n};\n\n/**\n * Returns list of cities by given query\n * @link https://openweathermap.org/current#data\n */\nexport const getCityList = async (\n  query: string\n): Promise<IResponseCityList> => {\n  const { data } = await request.get<IResponseCityList>(`${API_URL}/find`, {\n    params: {\n      q: query,\n      appid: process.env.REACT_APP_OPEN_WEATHER_KEY,\n      units: \"metric\",\n    },\n  });\n\n  return data;\n};\n\n/**\n * Provides icon url by given id\n * @link https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2\n */\nexport const getIconUrl = (iconId: string) => {\n  return `https://openweathermap.org/img/wn/${iconId}@2x.png`;\n};\n\nexport const getCountryFlag = (country: string) => {\n  return `https://openweathermap.org/images/flags/${country.toLocaleLowerCase()}.png`;\n};\n","import { useState, useEffect } from \"react\";\nimport { ICityWeather, getWeatherByCityName } from \"../services/weather\";\n\nconst DEFAULT_PLACE = \"Luxembourg\";\n\nconst useWeather = () => {\n  const [data, setData] = useState<ICityWeather | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadData = async (city: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const data = await getWeatherByCityName(city);\n      setData(data);\n    } catch (err) {\n      setData(null);\n      setError(\"Weather API is not working\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData(DEFAULT_PLACE);\n  }, []);\n\n  const refreshData = () => {\n    if (loading) {\n      return;\n    }\n\n    if (data === null) {\n      loadData(DEFAULT_PLACE);\n    } else {\n      loadData(data.name);\n    }\n  };\n\n  return {\n    loading,\n    error,\n    data,\n    refreshData,\n    getWeather: loadData,\n    setCurrentPlace: setData,\n  };\n};\n\nexport default useWeather;\n","import React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport { getIconUrl, ICityWeather } from \"../../services/weather\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport { ISettings } from \"../../hooks/useSettings\";\n\ninterface IProps {\n  data: ICityWeather;\n  settings: ISettings;\n}\n\nconst WeatherPreview: React.FC<IProps> = ({ data, settings }) => {\n  const { main, wind, name } = data;\n  const currentWeather = data.weather[0];\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignContent=\"center\"\n    >\n      <Grid item>\n        <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n          <Grid item xs={6}>\n            <Typography variant=\"h3\">{main.temp}°C</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Avatar\n              alt=\"Weather icon\"\n              src={getIconUrl(currentWeather.icon)}\n              sx={{ width: 100, height: 100 }}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h6\">{name}</Typography>\n      </Grid>\n      <Grid item>\n        <Typography>\n          Min/Max {main.temp_min}°C/{main.temp_max}°C\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography>\n          Feels like {main.feels_like}°C. {currentWeather.description}\n        </Typography>\n      </Grid>\n      <Grid item>\n        {settings.pressure && (\n          <Typography>Pressure: {main.pressure}</Typography>\n        )}\n        {settings.humidity && (\n          <Typography>Humidity: {main.humidity}</Typography>\n        )}\n        {settings.windSpeed && (\n          <Typography>Wind speed: {wind.speed}m/s</Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default WeatherPreview;\n","import { useState } from \"react\";\nimport { getCityList, IResponseCityList } from \"../services/weather\";\n\nconst useSearch = () => {\n  const [data, setData] = useState<IResponseCityList | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const searchPlace = async (query: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const data = await getCityList(query);\n      setData(data);\n    } catch (err) {\n      setData(null);\n      setError(\"Weather API is not working\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    loading,\n    searchPlace,\n    error,\n    data,\n  };\n};\n\nexport default useSearch;\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport {\n  getCountryFlag,\n  getIconUrl,\n  ICityWeather,\n} from \"../../services/weather\";\nimport Box from \"@mui/material/Box\";\nimport useSearch from \"../../hooks/useSearch\";\nimport debounce from \"lodash/debounce\";\nimport styled from \"@emotion/styled\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\n\nconst FlagIcon = styled.img`\n  height: 1rem;\n  margin: auto 10px;\n`;\n\nconst WeatherIcon = styled.img`\n  height: 20px;\n  width: 40px;\n  object-fit: cover;\n  margin-left: 1rem;\n`;\n\ninterface IProps {\n  onSelect: (city: ICityWeather) => void;\n}\n\nconst SearchBox: React.FC<IProps> = (props) => {\n  const { loading, data, searchPlace } = useSearch();\n  const [inputValue, setInputValue] = useState(\"\");\n  const [options, setOptions] = useState<ICityWeather[]>([]);\n\n  const updateSearch = useCallback(debounce(searchPlace, 500), []);\n\n  // Display options from dropdown\n  useEffect(() => {\n    if (data !== null) {\n      setOptions(data.list);\n    }\n  }, [data, loading]);\n\n  // Search for query\n  useEffect(() => {\n    if (inputValue.length > 3) {\n      updateSearch(inputValue);\n    }\n  }, [inputValue]);\n\n  return (\n    <Autocomplete\n      id=\"search-city\"\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Search city\"\n          fullWidth\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      getOptionLabel={(option) => option.name}\n      options={options}\n      loading={loading}\n      onChange={(event, place) => {\n        props.onSelect(place as ICityWeather);\n      }}\n      freeSolo\n      renderOption={(props, option) => {\n        const { main, id, sys, weather, name } = option;\n        const currentWeather = weather[0];\n\n        return (\n          <Box component=\"li\" {...props} key={id}>\n            <Grid container alignContent=\"center\" justifyContent=\"start\">\n              <Grid item>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  {name}\n                  {\", \"}\n                  {sys.country}\n                  <FlagIcon\n                    alt={sys.country}\n                    src={getCountryFlag(sys.country)}\n                  />\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"subtitle2\">\n                  {main.temp}°C\n                  <WeatherIcon\n                    alt=\"Weather icon\"\n                    src={getIconUrl(currentWeather.icon)}\n                  />\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n        );\n      }}\n    />\n  );\n};\n\nexport default SearchBox;\n","import { useState } from \"react\";\n\nexport interface ISettings {\n  pressure: boolean;\n  humidity: boolean;\n  windSpeed: boolean;\n}\n\nexport type ISettingField = keyof ISettings;\n\nconst useSettings = () => {\n  const [settings, setSettings] = useState<ISettings>({\n    pressure: true,\n    humidity: true,\n    windSpeed: true,\n  });\n\n  const toggleField = (field: ISettingField) => {\n    if (settings.hasOwnProperty(field)) {\n      setSettings({ ...settings, [field]: !settings[field] });\n    }\n  };\n  return { settings, toggleField };\n};\n\nexport default useSettings;\n","import RefreshIcon from \"@mui/icons-material/Refresh\";\nimport Fab, { FabProps } from \"@mui/material/Fab\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledFab = styled(Fab)`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n`;\nconst RefreshButton = (props: FabProps) => (\n  <StyledFab {...props} color=\"primary\" aria-label=\"refresh\">\n    <RefreshIcon />\n  </StyledFab>\n);\n\nexport default RefreshButton;\n","import React from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport useWeather from \"./hooks/useWeather\";\nimport WeatherPreview from \"./components/WeatherPreview\";\nimport Settings from \"./components/Settings\";\nimport SearchBox from \"./components/SearchBox\";\nimport useSettings from \"./hooks/useSettings\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport RefreshButton from \"./components/RefreshButton\";\nimport Box from \"@mui/material/Box\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nconst App: React.FC = () => {\n  const { loading, data, setCurrentPlace, refreshData } = useWeather();\n  const { settings, toggleField } = useSettings();\n\n  return (\n    <Container>\n      <CssBaseline />\n      <Grid container spacing={2} alignContent=\"center\">\n        <Grid item xs={12} mt={2}>\n          <SearchBox onSelect={setCurrentPlace} />\n        </Grid>\n      </Grid>\n      <Settings settings={settings} toggleField={toggleField} />\n\n      <RefreshButton onClick={refreshData} />\n      {loading ? (\n        <Box sx={{ width: \"100%\" }}>\n          <LinearProgress />\n        </Box>\n      ) : data ? (\n        <WeatherPreview data={data} settings={settings} />\n      ) : (\n        <div>Sorry, try again later</div>\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}