{"version":3,"sources":["services/weather.ts","hooks/useWeather.ts","components/WeatherPreview/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_URL","getWeatherByCityName","a","city","request","get","params","q","appid","process","units","data","useWeather","useState","setData","loading","setLoading","error","setError","getWeather","WeatherPreview","iconId","main","wind","currentWeather","weather","Grid","container","spacing","direction","justifyContent","alignContent","item","alignItems","xs","Typography","variant","temp","Avatar","alt","src","icon","sx","width","height","temp_min","temp_max","feels_like","description","pressure","humidity","speed","App","Fragment","CssBaseline","Button","onClick","Skeleton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca674dd9.chunk.js","sourcesContent":["import request from \"axios\";\n\nconst API_URL = \"https://api.openweathermap.org/data/2.5\";\n\n/**\n * Weather fields in API response\n * @link https://openweathermap.org/current#format\n */\nexport interface ICoordField {\n  coord: {\n    /** City geo location, longitude */\n    lon: number;\n    /** City geo location, latitude */\n    lat: number;\n  };\n}\n\nexport interface IWeatherField {\n  /** Weather condition id, */\n  id: number;\n  /** Group of weather parameters (Rain, Snow, Extreme etc.) */\n  main: string;\n  /** Weather condition within the group */\n  description: string;\n  /** Weather icon id */\n  icon: string;\n}\n\nexport interface IMainField {\n  /** Temperature, Kelvins */\n  temp: number;\n  /** Temperature, Kelvins. This temperature parameter accounts for the human perception of weather */\n  feels_like: number;\n  /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */\n  pressure: number;\n  /** Humidity, % */\n  humidity: number;\n  /** Minimum temperature within a large city or a megalopolis (optional parameter), Kelvin */\n  temp_min: number;\n  /** Maximum temperature within a large city or a megalopolis (optional parameter), Kelvins */\n  temp_max: number;\n  /**  Atmospheric pressure on the sea level, hPa */\n  sea_level: number;\n  /** Atmospheric pressure on the ground level, hPa */\n  grnd_level: number;\n}\n\nexport interface IWindField {\n  /** Wind speed. Unit: meter/sec. */\n  speed: number;\n  /** Wind direction, degrees (meteorological) */\n  deg: number;\n}\n\nexport interface ICloudsField {\n  /** Cloudiness, % */\n  all: number;\n}\n\nexport interface IRainField {\n  /** Rain volume for the last 1 hour */\n  \"1h\": number;\n  /** Rain volume for the last 3 hours */\n  \"3h\": number;\n}\n\nexport interface IShowField {\n  /** Snow volume for the last 1 hour */\n  \"1h\": number;\n  /** Snow volume for the last 3 hours */\n  \"3h\": number;\n}\n\nexport interface ISysField {\n  /** Internal parameter */\n  id: number;\n  /** Country code (GB, JP etc.) */\n  country: string;\n  /** Sunrise time, unix, UTC */\n  sunrise: number;\n  /** Sunset time, unix, UTC */\n  sunset: number;\n}\n\ntype Nullable<T> = { [P in keyof T]: T[P] | null };\n\nexport interface ICityWeather {\n  /** City ID */\n  id: number;\n  /** City name */\n  name: string;\n  /** Time of data calculation, unix, UTC */\n  dt: number;\n  /** Shift in seconds from UTC */\n  timezone: number;\n  main: IMainField;\n  wind: IWindField;\n  clouds: ICloudsField;\n  weather: IWeatherField[];\n  rain: Nullable<IRainField>;\n  snow: Nullable<IShowField>;\n  sys: ISysField;\n}\n\nexport const getWeatherByCityName = async (\n  city: string = \"Luxembourg\"\n): Promise<ICityWeather> => {\n  const { data } = await request.get<ICityWeather>(`${API_URL}/weather`, {\n    params: {\n      q: city,\n      appid: process.env.REACT_APP_OPEN_WEATHER_KEY,\n      units: \"metric\", // For temperature in Celsius\n    },\n  });\n\n  return data;\n};\n\n/**\n * Provides icon url by given id\n * @link https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2\n */\nexport const getIconUrl = (iconId: string) => {\n  return `https://openweathermap.org/img/wn/${iconId}@2x.png`;\n};\n","import { useState } from \"react\";\nimport { ICityWeather, getWeatherByCityName } from \"../services/weather\";\n\nconst useWeather = () => {\n  const [data, setData] = useState<ICityWeather | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadData = async (city?: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const data = await getWeatherByCityName(city);\n      setData(data);\n    } catch (err) {\n      setData(null);\n      setError(\"Weather API is not working\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    loading,\n    getWeather: loadData,\n    error,\n    data,\n  };\n};\n\nexport default useWeather;\n","import React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport { getIconUrl, ICityWeather } from \"../../services/weather\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\n\ninterface IProps {\n  data: ICityWeather;\n}\nconst WeatherPreview: React.FC<IProps> = ({ data }) => {\n  const { main, wind } = data;\n  const currentWeather = data.weather[0];\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignContent=\"center\"\n    >\n      <Grid item>\n        <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n          <Grid item xs={6}>\n            <Typography variant=\"h3\">{main.temp}째C</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Avatar\n              alt=\"Weather icon\"\n              src={getIconUrl(currentWeather.icon)}\n              sx={{ width: 100, height: 100 }}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Typography>\n          Min/Max {main.temp_min}째C/{main.temp_max}째C\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography>\n          Feels like {main.feels_like}째C. {currentWeather.description}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography>Pressure: {main.pressure}</Typography>\n        <Typography>Humidity: {main.humidity}</Typography>\n        <Typography>Wind speed: {wind.speed}m/s</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default WeatherPreview;\n","import React from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Button from \"@mui/material/Button\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport useWeather from \"./hooks/useWeather\";\nimport WeatherPreview from \"./components/WeatherPreview\";\n\nconst App: React.FC = () => {\n  const { loading, getWeather, data } = useWeather();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <h1>Weather app</h1>\n\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          getWeather(\"London\");\n        }}\n      >\n        Refresh\n      </Button>\n\n      {loading ? (\n        <Skeleton />\n      ) : data ? (\n        <WeatherPreview data={data} />\n      ) : (\n        <div>Click search button</div>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}